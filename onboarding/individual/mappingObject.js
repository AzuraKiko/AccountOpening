const eql = require("deep-equal");
const { fields } = require("../config/mapIndividual");
const { equixData } = require("../config/hodingAddress");
const { readJSONfile } = require("../../common/readJSONfile");
const { checkType } = require("../../common/checkType");
const { normalizeValue } = require("../../common/normalizeValue");
const { getValueArray } = require("../../common/getValue");
const { loggerTableType, loggerTableMatch } = require("../../logger/loggerTableAll");
const { saveFile } = require("../../common/saveFile");
const { loggerSimpleMatch } = require("../../logger/loggerSimple");
const { loggerFailType ,loggerFailMatch } = require("../../logger/loggerTableFail");

// ƒê∆∞·ªùng d·∫´n t·ªõi file JSON Auseix
let auseixData = readJSONfile("../onboarding/individual/auseix.json");

// ƒê·ªãnh nghƒ©a field mappings (Auseix -> Equix)
const fieldMappings = fields;
// Ki·ªÉm tra t·ª´ng field
let resultTable = [];

for (let auseixKey in fieldMappings) {
  const { target, type, defaultValue, enumMap } = fieldMappings[auseixKey];

  const auseixValue = getValueArray(auseixData, auseixKey);
  let equixValue;
  if (Array.isArray(target)) {
    equixValue = target
      .map((t) => getValueArray(equixData, t))
      .filter((v) => v !== undefined) // L·ªçc gi√° tr·ªã `undefined`
      .join(" "); // G·ªôp l·∫°i th√†nh chu·ªói
  } else {
    equixValue = target ? getValueArray(equixData, target) : undefined;
  }

  // √Åp d·ª•ng defaultValue n·∫øu c·∫ßn
  const finalAuseixValue = auseixValue ?? defaultValue;

  // Ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu h·ª£p l·ªá
  const isTypeValid = checkType(finalAuseixValue, type);

  // N·∫øu c√≥ enumMap, √°nh x·∫° gi√° tr·ªã
  const mappedAuseixValue =
    enumMap && finalAuseixValue in enumMap
      ? enumMap[finalAuseixValue]
      : finalAuseixValue;
  const mappedEquixValue = equixValue;

  // Chu·∫©n h√≥a d·ªØ li·ªáu tr∆∞·ªõc khi so s√°nh
  const normalizedEquixValue = normalizeValue(mappedEquixValue, type);

  // X√°c ƒë·ªãnh gi√° tr·ªã so s√°nh v√† tr·∫°ng th√°i match
  let matchResult = ""; // M·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ target
  if (target) {
    matchResult =
      isTypeValid && eql(mappedAuseixValue, normalizedEquixValue) ? "‚úÖ" : "‚ùå";
  } else
    matchResult =
      isTypeValid && eql(mappedAuseixValue, defaultValue) ? "‚úÖ" : "‚ùå";

  resultTable.push({
    "Auseix Field": auseixKey,
    "Equix Field": Array.isArray(target) ? target.join(", ") : target || "N/A",
    "Auseix Value": mappedAuseixValue,
    "Equix Value": target ? mappedEquixValue : "üëÄ",
    "Expected Type": type,
    "Type Valid": isTypeValid ? "‚úÖ" : `‚ùå (Expected ${type})`,
    "Match Result": matchResult,
  });
}

// In k·∫øt qu·∫£ v√†o b·∫£ng ƒëi·ªÅu khi·ªÉn
// loggerTableType(resultTable);
// loggerTableMatch(resultTable);

// loggerSimpleMatch(resultTable);

loggerFailType(resultTable);
loggerFailMatch(resultTable);

// Ghi k·∫øt qu·∫£ v√†o file CSV
const { Parser } = require("json2csv");
const content = new Parser().parse(resultTable);

saveFile(content, "../onboarding/individual/result.csv");